cbuffer psConstant
{
	float3 LightPos;
	float4 LightColor;
	float3 eyePos;
}


Texture2D dtext: register(t0);            // Diffuse texture for mesh
Texture2D ntext: register(t1);            // normal texture for mesh
Texture2D stext: register(t2);            // specular texture for mesh

SamplerState MeshTextureSampler : register(s0);

struct VS_OUTPUT
{
    float4 Position     : SV_POSITION;
	float3 Normal		: NORMAL;
	float2 Texcoord		: TEXCOORD;
	float3 Binormal		: BINORMAL;
	float3 Tangent		: TANGENT;
};

float4 PS(VS_OUTPUT input) : SV_TARGET
{
	float4 textureColor;
    float4 bumpMap;
    float3 bumpNormal;
    float3 lightDir;
    float lightIntensity;
    float4 color;


    // Sample the texture pixel at this location.
    textureColor = dtext.Sample(MeshTextureSampler, input.Texcoord);
	
    // Sample the pixel in the bump map.
    bumpMap =  ntext.Sample(MeshTextureSampler, input.Texcoord);

    // Expand the range of the normal value from (0, +1) to (-1, +1).
    bumpMap = (bumpMap * 2.0f) - 1.0f;

    // Calculate the normal from the data in the bump map.
    bumpNormal = input.Normal + bumpMap.x * input.Tangent + bumpMap.y * input.Binormal;
	
    // Normalize the resulting bump normal.
    bumpNormal = normalize(bumpNormal);
	lightDir = normalize(input.Position.xyz - LightPos);
    // Invert the light direction for calculations.
    lightDir = -lightDir;

    // Calculate the amount of light on this pixel based on the bump map normal value.
    lightIntensity = saturate(dot(bumpNormal, lightDir));

    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
    color = saturate(LightColor * lightIntensity)+0.085f;

    // Combine the final bump light color with the texture color.
    color = color * textureColor;
	
    return color;
}